///@file
/*
#############################################################################
#
# Project Ledstrip dotstar
#
# Sam Zandee 2017
#
#############################################################################
*/

// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include <hwlib.hpp>
#ifndef LEDSTRIP_HPP
#define LEDSTRIP_HPP

/// Number of LEDs on the strip
const int numleds = 60;

/// Here we store the colors
struct Color {
    uint8_t red;
    uint8_t green;
    uint8_t blue;
};
///\brief The ledstrip class
//
///\details This is the base class for the ledstrip library. This class defines all the base charachteristics of a
/// ledstrip.
/// All the LEDstrip functions are declared and defined in this class.
class LEDstrip
{
private:
    hwlib::target::pin_out clock;
    hwlib::target::pin_out data;
    /// Here we store all the information off each separate LED
    uint8_t LEDarray[numleds * 4];

    /// SendBit sends one bit
    //
    /// SendBit sets the clock output low. After the clock is low, the data will be set high or low depending of whats
    /// needed.
    void sendBit(bool value);

    /// SendByte sends one byte
    //
    /// SendByte makes a byte and calls SendBit with its value
    void sendByte(const uint8_t& value);

    /// sendend sends 4 bytes of 0xFF
    //
    /// This LEDstrip needs an endframe. This frame consist 4 bytes of 0xFF
    void sendend();

    /// sendend sends 4 bytes of 0x
    //
    /// This LEDstrip needs an startframe. This frame consist 4 bytes of 0x00
    void sendstart();

public:
    /// pin select
    //
    /// Here we use the hwlib to target the output pins
    LEDstrip(hwlib::target::pins clock, hwlib::target::pins data);
    
    /// Clears al the LEDs
    //
    /// The clear function sets all the LED to off. 
    void clear();
    
    /// Sets all the led.
    //
    /// The array with all the led info wil loop through the function. Depending if there is a 1 or 0 the SendByte en SendBit function will be called.
    /// Nothing will happen aslong you do not call the show function. At first the sendstart function will be called. After the start de array will be call.
    /// At the end the endframe will be called. Four end-frame bytes are seemingly indistinguishable from a white
    /// pixel, and empirical testing suggests it can be left out...but it's
    /// always a good idea to follow the datasheet.
    void show();
    
    /// Sets all the LEDs to the given brightness value between 0 and 31
    //
    /// To turn on all the LED brightness you have to call this function and give a value between 0 and 31.
    void setAllBrightness(uint8_t brightness);
    
    /// Sets all the LEDs to the given color.
    //
    /// This LEDstrip works with Red, Green and blue. If you want all the LEDs to one collor you call SetAllColor.
    void setAllColor(uint8_t r, uint8_t g, uint8_t b);
    
    /// Sets a color on a given position
    //
    /// Here you can set position x on a given color.
    void setColor(uint32_t posled, uint8_t r, uint8_t g, uint8_t b);
    
    /// Sets brightness on a given position
    //
    /// Here you can set position x on a given brightness
    void setBrightness(uint32_t posled, uint8_t brightness);
    
    /// Moves all the led one position
    //
    /// The current position of all the LEDs is + 1
    void MoveColorsUp();
    
    /// Makes a rainbow
    //
    /// This function makes a rainbow of 3 color. 
    void rainbow();
    
    /// Makes a Disco
    //
    /// This function makes a rainbow of 6 colors.
    void disco();
    
    /// Makes a snake
    //
    /// Makes a snake through the strip at a given speed en color. Where speed 1 the fastest is.
    void snake(int speed, uint8_t r, uint8_t g, uint8_t b);
    
    /// gets the color of a position
    //
    /// This function returns a struct color of a position
    Color getColor(uint32_t posled);
};

#endif // LEDSTRIP_HPP
